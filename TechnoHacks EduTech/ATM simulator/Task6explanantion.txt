Explanation: atm simulator


1. We start with an initial balance of $1000 and define functions to check balance, deposit money, and withdraw money.

2. In the check_balance function, it prints the current balance.

3. The deposit function allows the user to input an amount to deposit, and if the amount is valid (greater than 0), it updates the balance and informs the user.

4. The withdraw function allows the user to input an amount to withdraw. It checks if the amount is valid and if there's enough balance. If both conditions are met, it updates the balance and informs the user. Otherwise, it provides appropriate error messages.

5. The main loop presents a menu of options to the user: check balance, deposit, withdraw, or quit.

6. The program keeps running in a loop until the user chooses to quit.

7. Each section of the code is clearly documented to make it informative and easy to understand.

This program provides a simple text-based ATM simulation, but you can enhance it further by adding features like user account management, transaction history, or PIN verification for more realism.

Explanation: Task6withpin&trnhist

# Define initial balance
initial_balance = 1000

1. This line sets the initial balance for a new account to $1000.

# Create a dictionary to store user accounts with PIN and balance
user_accounts = {
    "1234": {
        "name": "John Doe",
        "pin": "1234",
        "balance": initial_balance,
        "transaction_history": []
    },
    "5678": {
        "name": "Jane Smith",
        "pin": "5678",
        "balance": initial_balance,
        "transaction_history": []
    }
}

2. Here, we create a dictionary called user_accounts to store user information. Each user is represented by a unique PIN (key) and has a name, PIN, initial balance, and an empty transaction history list.

# Function to check balance
def check_balance(account):
    balance = account["balance"]
    print(f"Hello, {account['name']}, your account balance is ${balance}")

3. This function, check_balance, takes an account as input and displays the user's name and their account balance.

# Function to deposit money
def deposit(account):
    deposit_amount = float(input("Enter the amount you want to deposit: $"))
    if deposit_amount > 0:
        account["balance"] += deposit_amount
        account["transaction_history"].append(f"Deposited ${deposit_amount}")
        print(f"${deposit_amount} has been successfully deposited.")
    else:
        print("Invalid deposit amount. Please enter a positive value.")

4. The deposit function takes an account as input and allows the user to input the deposit amount. If the amount is positive, it adds the deposit to the account's balance, updates the transaction history, and provides a success message.

# Function to withdraw money
def withdraw(account):
    withdraw_amount = float(input("Enter the amount you want to withdraw: $"))
    if withdraw_amount > 0 and withdraw_amount <= account["balance"]:
        account["balance"] -= withdraw_amount
        account["transaction_history"].append(f"Withdrew ${withdraw_amount}")
        print(f"${withdraw_amount} has been successfully withdrawn.")
    elif withdraw_amount > account["balance"]:
        print("Insufficient balance. Withdrawal failed.")
    else:
        print("Invalid withdrawal amount. Please enter a positive value.")

5. The withdraw function takes an account as input and allows the user to input the withdrawal amount. It checks if the amount is valid and there is enough balance. If both conditions are met, it deducts the amount, updates the transaction history, and provides a success message. If there's insufficient balance or an invalid amount, it displays appropriate messages.

# Function for PIN verification
def verify_pin():
    entered_pin = input("Please enter your 4-digit PIN: ")
    if entered_pin in user_accounts:
        return user_accounts[entered_pin]
    else:
        print("Invalid PIN. Please try again or contact your bank.")

6. The verify_pin function prompts the user to enter their 4-digit PIN and checks if it matches a valid account. If the PIN is correct, it returns the corresponding user account. If the PIN is invalid, it displays an error message.

# Main ATM simulation loop
while True:
    print("\nWelcome to the ATM Simulator")
    print("1. Check Balance")
    print("2. Deposit")
    print("3. Withdraw")
    print("4. Transaction History")
    print("5. Quit")

    choice = input("Please select an option (1/2/3/4/5): ")

7. In the main loop, the program displays a menu with five options: check balance, deposit, withdraw, view transaction history, and quit.

    if choice == '1':
        user_account = verify_pin()
        if user_account:
            check_balance(user_account)

8. If the user selects option 1, it calls the verify_pin function to check the PIN and then calls the check_balance function to display the user's balance.

    elif choice == '2':
        user_account = verify_pin()
        if user_account:
            deposit(user_account)

9. If the user selects option 2, it verifies the PIN and then calls the deposit function to handle the deposit operation.

    elif choice == '3':
        user_account = verify_pin()
        if user_account:
            withdraw(user_account)

10. If the user selects option 3, it verifies the PIN and then calls the withdraw function to handle the withdrawal operation.

    elif choice == '4':
        user_account = verify_pin()
        if user_account:
            print("Transaction History:")
            for transaction in user_account["transaction_history"]:
                print(transaction)

11. If the user selects option 4, it verifies the PIN and then displays the user's transaction history.

    elif choice == '5':
        print("Thank you for using the ATM Simulator. Goodbye!")
        break

12. If the user selects option 5, it displays a thank you message and exits the loop, ending the program.

    else:
        print("Invalid option. Please select a valid option (1/2/3/4/5).")

13. If the user enters an invalid option, it displays an error message and loops back to the main menu.

This code provides a user-friendly ATM simulator with user account management, transaction history, and PIN verification. Users can perform banking operations securely and view their transaction history.










